/*
 * Service apply rules.
 *
 * The CheckCommand objects `ping4`, `ping6`, etc
 * are provided by the plugin check command templates.
 * Check the documentation for details.
 *
 * Tip: Use `icinga2 object list --type Service` to
 * list all service objects after running
 * configuration validation (`icinga2 daemon -C`).
 */

/*
 * This is an example host based on your
 * local host's FQDN. Specify the NodeName
 * constant in `constants.conf` or use your
 * own description, e.g. "db-host-1".
 */

/*
 * These are generic `ping4` and `ping6`
 * checks applied to all hosts having the
 * `address` resp. `address6` attribute
 * defined.
 */
apply Service "ping4" {
  import "generic-service"

  check_command = "ping4"

  assign where host.address
}

apply Service "ping6" {
  import "generic-service"

  check_command = "ping6"

  assign where host.address6
}

/*
 * Apply the `ssh` service to all hosts
 * with the `address` attribute defined and
 * the custom attribute `os` set to `Linux`.
 */
apply Service "ssh" {
  check_command = "ssh"
  import "generic-service"

  assign where (host.address || host.address6) && host.vars.os == "Linux"
}


apply Service for (http_vhost => config in host.vars.http_vhosts) {
  check_command = "http"
  import "generic-service"

  vars += config
}

apply Service for (disk => config in host.vars.disks) {
  check_command = "disk"
  import "generic-agent-service"

  vars += config

  assign where host.vars.os == "Linux"
}

apply Service "icinga" {
  check_command = "icinga"
  import "generic-service"

  assign where host.name == NodeName
}

apply Service "load" {
  check_command = "load"
  import "generic-agent-service"

  vars.notification_interval = 1h

  /* Used by the ScheduledDowntime apply rule in `downtimes.conf`. */
  vars.backup_downtime = "02:00-03:00"

  assign where (host.vars.os == "Linux" && host.vars.host_type == "physical")
}

apply Service "mem" {
  check_command = "mem"
  import "generic-agent-service"

  vars.mem_free = true
  vars.mem_cache = true
  vars.mem_warning = 50
  vars.mem_critical = 20

  vars.notification_interval = 1h

  assign where (host.vars.os == "Linux" && host.vars.host_type == "physical")
}

apply Service "procs" {
  check_command = "procs"
  import "generic-agent-service"

  vars += host.vars

  vars.notification_interval = 1h

  assign where host.vars.os == "Linux"
}

apply Service "swap" {
  check_command = "swap"
  import "generic-agent-service"

  assign where host.name == NodeName
}

apply Service "users" {
  check_command = "users"
  import "generic-agent-service"

  assign where host.vars.os == "Linux"
}

apply Service "ldap" {
  import "generic-service"
  check_command = "ldap"
  vars.ldap_base = host.vars.ldap_base
  vars.ldap_v3 = true

  assign where host.vars.ldap_base
}

apply Service "ldap_sync" {
  import "generic-service"
  check_command = "ldap_sync"
  vars.ldap_sync_master = host.vars.ldap_master

  assign where host.vars.ldap_master
}

